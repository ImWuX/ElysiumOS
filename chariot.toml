[project]
name = "ElysiumOS"


# Source Targets #
[source.support]
type = "local"
url = "support"

[source.patches]
type = "local"
url = "patches"

[source.autoconf]
type = "tar.gz"
url = "https://ftp.gnu.org/gnu/autoconf/autoconf-2.69.tar.gz"

[source.automake]
type = "tar.gz"
url = "https://ftp.gnu.org/gnu/automake/automake-1.16.5.tar.gz"
modifiers = [
    { type = "patch", source = "patches", file = "automake.diff" }
]

[source.gnulib]
type = "tar.gz"
url = "https://git.savannah.gnu.org/cgit/gnulib.git/snapshot/gnulib-8c4d0fbf4c45df8e86acbb338b154930c5498dc3.tar.gz"

[source.libtool]
dependencies = ["host:autoconf", "host:automake"]
type = "tar.gz"
url = "https://ftp.gnu.org/gnu/libtool/libtool-2.4.7.tar.gz"
modifiers = [
    { type = "patch", source = "patches", file = "libtool.diff" },
    { type = "exec", source = "gnulib", cmd = "./bootstrap --force --skip-git --skip-po --gnulib-srcdir=$SOURCE:gnulib" }
]

[source.pkgconf]
type = "tar.gz"
dependencies = ["host:libtool", "host:automake"]
url = "https://github.com/pkgconf/pkgconf/archive/refs/tags/pkgconf-2.0.3.tar.gz"
modifiers = [
    { type = "patch", source = "patches", file = "pkgconf.diff" },
    { type = "exec", cmd = "libtoolize -cfvi && autoreconf -fvi" }
]

[source.mlibc-sysdeps]
type = "local"
url = "mlibc-sysdeps"

# TODO: Setup as some type of intermediate (maybe host) target that just installs headers. Eventually needed for mlibc.
# [source.linux-headers]
# type = "tar.xz"
# url = "https://cdn.kernel.org/pub/linux/kernel/v6.x/linux-6.1.8.tar.xz"
# modifiers = [
#     { type = "exec", cmd = "make ARCH=x86_64 headers_install INSTALL_HDR_PATH=bruh" }
# ]

[source.mlibc]
type = "tar.gz"
url = "https://github.com/managarm/mlibc/archive/refs/tags/4.0.0-rc1.tar.gz"
modifiers = [
    { type = "patch", source = "patches", file = "mlibc.diff" },
    { type = "merge", source = "mlibc-sysdeps" }
]

[source.binutils]
dependencies = ["host:libtool", "host:automake", "host:pkgconf"]
type = "tar.gz"
url = "https://ftp.gnu.org/gnu/binutils/binutils-2.41.tar.gz"
modifiers = [
    { type = "patch", source = "patches", file = "binutils.diff" },
    { type = "exec", cmd = """
        CFG=$(realpath ./config)
        for f in $(find . -name configure.ac); do \
            ( cd "$(dirname "$f")" && libtoolize -cfvi && autoreconf -fvi -I"$CFG" ); \
        done
    """ }
]

[source.gcc]
dependencies = ["host:libtool", "host:automake", "host:pkgconf"]
type = "tar.gz"
url = "https://ftp.gnu.org/gnu/gcc/gcc-13.2.0/gcc-13.2.0.tar.gz"
modifiers = [
    { type = "patch", source = "patches", file = "gcc.diff" },
    { type = "exec", cmd = """
        CFG=$(realpath ./config)
        for f in $(find . -name configure.ac); do \
            ( cd "$(dirname "$f")" && libtoolize -cfvi && autoreconf -fvi -I"$CFG" ); \
        done
    """ }
]

[source.cross-binutils]
type = "tar.gz"
url = "https://ftp.gnu.org/gnu/binutils/binutils-2.41.tar.gz"

[source.cross-gcc]
type = "tar.gz"
url = "https://ftp.gnu.org/gnu/gcc/gcc-13.2.0/gcc-13.2.0.tar.gz"
modifiers = [
    { type = "patch", source = "patches", file = "cross-gcc.diff" }
]

[source.rdsk]
type = "local"
url = "../elysium-rdsk" # TODO: Pull from git repo (Once it actually exists :D)

[source.kernel]
type = "local"
url = "kernel"

[source.tartarus]
type = "local"
url = "../tartarus-bootloader"


# Host Targets #
[host.autoconf]
dependencies = ["source:autoconf"]
configure = ["$SOURCE:autoconf/configure --prefix=$PREFIX"]
build = ["make -j$THREADS"]
install = ["DESTDIR=$INSTALL make install"]

[host.automake]
runtime-dependencies = ["host:autoconf"]
dependencies = ["source:automake"]
configure = ["$SOURCE:automake/configure --prefix=$PREFIX"]
build = ["make -j$THREADS"]
install = ["DESTDIR=$INSTALL make install-strip"]

[host.libtool]
runtime-dependencies = ["host:autoconf"]
dependencies = ["source:libtool", "host:autoconf", "host:automake"]
configure = ["$SOURCE:libtool/configure --prefix=$PREFIX"]
build = ["make -j$THREADS"]
install = ["DESTDIR=$INSTALL make install-strip"]

[host.pkgconf]
dependencies = ["source:pkgconf"]
configure = ["$SOURCE:pkgconf/configure --prefix=$PREFIX"]
build = ["make -j$THREADS"]
install = [
    "DESTDIR=$INSTALL make install-strip",
    "mkdir -p $INSTALL$PREFIX/share/pkgconfig/personality.d",
    """
    cat <<EOF >\"$INSTALL$PREFIX/share/pkgconfig/personality.d/x86_64-elysium.personality\"
Triplet: x86_64-elysium
SysrootDir: $ROOT
DefaultSearchPaths: $ROOT/usr/lib/pkgconfig:$ROOT/usr/share/pkgconfig
SystemIncludePaths: $ROOT/usr/include
SystemLibraryPaths: $ROOT/usr/lib
EOF
    """,
    "ln -s pkgconf $INSTALL$PREFIX/bin/x86_64-elysium-pkg-config"
]

[host.binutils]
dependencies = ["source:binutils"]
configure = ["$SOURCE:binutils/configure --with-sysroot=$ROOT --prefix=$PREFIX --target=x86_64-elysium --enable-targets=x86_64-elf,x86_64-pe --disable-nls --disable-werror --disable-dependency-tracking"]
build = ["make -j$THREADS all"]
install = ["DESTDIR=$INSTALL make install-strip"]

[host.bootstrap-gcc]
runtime-dependencies = ["host:binutils"]
dependencies = ["source:gcc", "mlibc-headers"]
configure = [
    """
    CFLAGS=\"-O2\" CXXFLAGS=\"-O2\" $SOURCE:gcc/configure \
        --prefix=$PREFIX \
        --target=x86_64-elysium \
        --with-sysroot=$ROOT \
        --enable-languages=c,c++ \
        --disable-nls \
        --disable-multilib \
        --disable-shared \
        --enable-initfini-array
    """
]
build = [
    "make -j$THREADS inhibit_libc=true all-gcc",
    "make -j$THREADS inhibit_libc=true all-target-libgcc"
]
install = [
    "DESTDIR=$INSTALL make install-gcc",
    "DESTDIR=$INSTALL make install-target-libgcc"
]

[host.cross-binutils]
dependencies = ["source:cross-binutils"]
configure = ["$SOURCE:cross-binutils/configure --target=x86_64-elf --prefix=$PREFIX --disable-nls --disable-werror --with-sysroot"]
build = ["make -j$THREADS all"]
install = ["DESTDIR=$INSTALL make install"]

[host.cross-gcc]
runtime-dependencies = ["host:cross-binutils"]
dependencies = ["source:cross-gcc"]
configure = ["$SOURCE:cross-gcc/configure --target=x86_64-elf --prefix=$PREFIX --disable-nls --enable-languages=c --without-headers"]
build = [
    "make -j$THREADS all-gcc",
    "make -j$THREADS all-target-libgcc"
]
install = [
    "DESTDIR=$INSTALL make install-gcc",
    "DESTDIR=$INSTALL make install-target-libgcc"
]

[host.gcc]
runtime-dependencies = ["host:binutils", "mlibc-headers", "mlibc"]
dependencies = ["source:gcc"]
configure = [
    """
    CFLAGS=\"-O2\" CXXFLAGS=\"-O2\" $SOURCE:gcc/configure \
        --prefix=$PREFIX \
        --target=x86_64-elysium \
        --with-sysroot=$ROOT \
        --enable-languages=c,c++ \
        --disable-nls \
        --disable-multilib \
        --enable-initfini-array
    """
]
build = [
    "make -j$THREADS inhibit_libc=true all-gcc",
    "make -j$THREADS inhibit_libc=true all-target-libgcc"
]
install = [
    "DESTDIR=$INSTALL make install-gcc",
    "DESTDIR=$INSTALL make install-target-libgcc"
]


[host.rdsk] # TODO: Possibly implement a configure esq build system for rdsk.. if not autotools lmao
dependencies = ["source:rdsk"]
configure = [
    "cp -r $SOURCE:rdsk/src .",
    "cp $SOURCE:rdsk/Makefile .",
]
build = ["make -j$THREADS all"]
install = ["DESTDIR=$INSTALL PREFIX=$PREFIX make install"]


# Standard Targets #
[target.mlibc-headers]
dependencies = ["source:mlibc", "source:support"] # TODO: Might need pkg-config
configure = [
    """
    meson setup \
        --cross-file $SOURCE:support/elysium.cross-file \
        --prefix=/usr \
        -Dheaders_only=true \
        -Ddisable_iconv_option=true \
        -Ddisable_intl_option=true \
        -Ddisable_crypt_option=true \
        -Ddisable_linux_option=true \
        --buildtype=release \
        $SOURCE:mlibc
    """
]
build = ["ninja"]
install = ["DESTDIR=$INSTALL ninja install"]

[target.mlibc]
dependencies = ["source:mlibc", "source:support", "mlibc-headers", "host:bootstrap-gcc"] # TODO: Might need pkg-config
configure = [
    """
    meson setup \
        --cross-file $SOURCE:support/elysium.cross-file \
        --prefix=/usr \
        --libdir=lib \
        -Dmlibc_no_headers=true \
        -Ddisable_iconv_option=true \
        -Ddisable_intl_option=true \
        -Ddisable_crypt_option=true \
        -Ddisable_linux_option=true \
        --buildtype=debug \
        -Ddefault_library=both \
        $SOURCE:mlibc
    """
]
build = ["ninja"]
install = ["DESTDIR=$INSTALL ninja install"]

[target.tartarus]
dependencies = ["source:tartarus", "source:support", "host:cross-gcc"]
configure = ["cp -r $SOURCE:tartarus/* ."]
build = [
    "make -j$THREADS -C bios disk/mbr.bin",
    """
    make -j$THREADS -C core tartarus.sys TARGET=amd64-bios \
        CC=x86_64-elf-gcc OBJCPY=x86_64-elf-objcopy LD=x86_64-elf-ld ASMC=nasm GIT=git \
        IA32_LIBGCC=$SOURCE:support/libgcc-i686.a AMD64_LIBGCC=$SOURCE:support/libgcc-x86_64.a
    """
]
install = ["cp bios/disk/mbr.bin core/tartarus.sys tartarus.h $INSTALL"]

[target.kernel]
dependencies = ["source:kernel", "source:tartarus", "host:cross-gcc"]
configure = ["cp -r $SOURCE:kernel/* ."]
build = ["make -j$THREADS src/kernel.elf ARCH=amd64 TARTARUS_INCLUDE=$SOURCE:tartarus CC=x86_64-elf-gcc LD=x86_64-elf-ld ASMC=nasm"]
install = ["cp src/kernel.elf $INSTALL"]

# Sysroot #
[source.test]
type = "local"
url = "../elysium-userspace/test"

[target.test]
dependencies = ["source:test", "host:gcc", "mlibc-headers", "mlibc"]
configure = [
    "cp -r $SOURCE:test/src .",
    "cp $SOURCE:test/Makefile ."
]
build = ["make -j$THREADS all"]
install = ["DESTDIR=$INSTALL PREFIX=$PREFIX make install"] # TODO: Prefix here is sus.. really need to up the tooling game

[target.root]
dependencies = ["mlibc", "test", "host:rdsk"]
configure = ["mkdir $ROOT/modules", "mkdir $ROOT/tmp"] # TODO: Violates chariot principles...
build = ["rdsk -c $ROOT -o root.rdk"]
install = ["cp root.rdk $INSTALL/root.rdk"]